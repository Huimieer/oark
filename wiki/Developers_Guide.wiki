#summary Developers Guide
#labels a

= Environment for Developers =

The driver is built with *WinDDK 6001.17121*, you can install this DDK with others DDKs in the system without problems.

For an easy environment you can install this tools:
  * *AnkhSVN* - Subversion Support for Visual Studio: [http://ankhsvn.open.collab.net/]
  * *DDKWizard + DDKBUILD.CMD* - Driver environment for Visual Studio: [http://ddkwizard.assarbad.net/]
  * *Visual Studio* - IDE with intellisense ... 
  * *WinDDK 6001.17121* - The DDK to build the driver.

DDKWizard It is compatible with Visual Studio .NET, Visual Studio .NET 2003, Visual Studio 2005 and 2008 and the Express Editions of Visual C++ 2005 and 2008. The \normal" Visual C++ versions are supposed to work ne as well. Refer to section 2.5 and section 3.1 for some possible limitations depending on your Visual Studio version. Visual Studio 2005 and 2008 (and their avors) support all DDKWizard features!

== Configuring the driver project in Visual Studio ==

In the subversion exist a visual studio project, but you need change:

  * *Properties* of the solution *.WXP* (right click in the solution project with extension *.WXP*, in solution explorer tab). In the option *"Configuration Properties"* click in *NMake* and add to *Include Search Path* and add the same in *Forced Includes*:
    * *X:\WinDDK_PATH\DDK_VERSION\inc\api*
    * *X:\WinDDK_PATH\DDK_VERSION\inc\ddk*
    * -
    * *WARNING:* NEVER REMOVE THE ENTRY: 
        * *"..\..\common\common"* in *Include Search Path* and *Forced Includes*
    * *WARNING:* NEVER REMOVE THE ENTRY:
        * *"xcopy /y ".\obj%BUILD_ALT_DIR%\i386\`*`.sys" "..\..\oark_usermode\oark_usermode""* in *ddkpostbld.cmd* file
    * *WARNING:* NEVER REMOVE THE ENTRY:
        * *INCLUDES =..\..\common\common* in *sources* file

You need configure the *"WinDDK Paths"* in the file with extension *".vsprops"*

    * *Name="DDKBUILD_PATH"*
    * *Value="C:\DDK_BUILD_PATH.CMD"* You can download the CMD from: *[http://ddkwizard.assarbad.net/]*, *Example: Value="C:\WINDDK\ddkbuild.cmd"*
    * *Name="WXPBASE", "WNETBASE"* etc..
    * *Value="C:\WinDDK_PATH\DDK_VERSION"*, you need add here the PATH of the WinDDK Path Version, you can find the version for build the driver in this wiki. *Example: Value="C:\WinDDK\6001.17121"*

Compile *ALWAYS* in *WXP Free*

== Configuring the user mode project in Visual Studio ==

The user mode executable have the driver inside (in a .rsrc), when the executable is running it dumps the driver to a temp file and load the driver. When you build the driver project the output with ".sys" extension is copied to the folder of user mode project. When you build the user mode project with a new driver version you need *Clean the project* after compile.

  * *WARNING:* NEVER REMOVE THE ENTRY:
        * *"..\..\common\common"* in *"Project Properties -> Configuration Properties -> C/C++ -> General -> Additional Include Directories"*

Compile *ALWAYS* in *Release mode*.

= Debugging and Testing Environment =

For an easy debugging and testing environment you can install this tools:
  * *VirtualKD* - allows speeding up (up to 45x) Windows kernel module debugging using VMWare and VirtualBox virtual machines: [http://virtualkd.sysprogs.org/]
  * *VirtualBox or VMWare* (only the versions *compatible* with *VirtualKD*) - x86 virtualization: VirtualBox [http://www.virtualbox.org/] VMWare [http://www.vmware.com/]
  * *Debugging Tools for Windows* 32-bit Versions: [http://www.microsoft.com/whdc/devtools/debugging/installx86.mspx]
  * *Windows Symbol Packages* for the Windows Version of the Virtual Machines: [http://www.microsoft.com/whdc/devtools/debugging/symbolpkg.mspx]
  * If you like the *IDA Pro* for debugging - Kernel debugging with IDA Pro / Windbg plugin and VirtualKd: [http://www.hexblog.com/?p=123]

To test the user mode and the driver the best and the safe way is in a Virtual Machine, you need configure this Virtual Machine with Virtual KD for an easy-debugging (without VirtualKD kernel debugging is very very slow). 

The code have some DKOM code (Direct Kernel Object Manipulation), then it is necessary hardcode some offsets of Windows Kernel structures in the code. In each Windows version have different offset for the same field of a structure. Then you need install a lot of Virtual Machines with different Windows Version: XP, Vista, 7 ...

Of course you need download the Windows Symbols for each Version to view the structs from WinDBG etc..

VirtualBox and VMWare have support for shared folders between the Virtual Machine and the Real Machine, then you can configure the output of the project in Visual Studio to the shared folder. And after, it is only necessary, compile and execute the .exe from the Virtual Machines.