#summary Developers Guide

= INDEX =

  # [#Environment_for_Developers]
    # [#Configuring the driver project in Visual Studio]
    # [#Debugging and Testing Environment]
  # [#Coding_Style]

= Environment for Developers =

The driver is built with *WinDDK 6001.17121*, you can install this DDK with others DDKs in the system without problems.

For an easy environment you can install this tools:
  * *AnkhSVN* - Subversion Support for Visual Studio: [http://ankhsvn.open.collab.net/]
  * *DDKWizard + DDKBUILD.CMD* - Driver environment for Visual Studio: [http://ddkwizard.assarbad.net/]
  * *Visual Studio* - IDE with intellisense ...: [http://msdn.microsoft.com/en-us/vstudio/default.aspx]
  * *WinDDK 6001.17121* - The DDK to build the driver: there is a internal link for developers, commiters...
  * *Visual Assist X* - (Optional Tool, but very useful) provides productivity enhancements that help you read, write, navigate and refactor code with blazing speed in all Microsoft IDEs: [http://www.wholetomato.com/]

DDKWizard It is compatible with Visual Studio .NET, Visual Studio .NET 2003, Visual Studio 2005 and 2008 and the Express Editions of Visual C++ 2005 and 2008. The \normal" Visual C++ versions are supposed to work ne as well. Refer to section 2.5 and section 3.1 for some possible limitations depending on your Visual Studio version. Visual Studio 2005 and 2008 (and their avors) support all DDKWizard features!

PD: AnkhSVN dont works in Express Versions.

== Configuring the driver project in Visual Studio ==

In the subversion exist a visual studio project, but you need change:

  * *Properties* of the solution *.WXP* (right click in the solution project with extension *.WXP*, in solution explorer tab). In the option *"Configuration Properties"* click in *NMake* and add to *Include Search Path* and add the same in *Forced Includes*:
    * *X:\WinDDK_PATH\DDK_VERSION\inc\api*
    * *X:\WinDDK_PATH\DDK_VERSION\inc\ddk*
    * -
    * *WARNING:* NEVER REMOVE THE ENTRY: 
        * *"..\..\common\common"* in *Include Search Path* and *Forced Includes*
    * *WARNING:* NEVER REMOVE THE ENTRY:
        * *"xcopy /y ".\obj%BUILD_ALT_DIR%\i386\`*`.sys" "..\..\oark_usermode\oark_usermode""* in *ddkpostbld.cmd* file
    * *WARNING:* NEVER REMOVE THE ENTRY:
        * *INCLUDES =..\..\common\common* in *sources* file

You need configure the *"WinDDK Paths"* in the file with extension *".vsprops"*

    * *Name="DDKBUILD_PATH"*
    * *Value="C:\DDK_BUILD_PATH.CMD"* You can download the CMD from: *[http://ddkwizard.assarbad.net/]*, *Example: Value="C:\WINDDK\ddkbuild.cmd"*
    * *Name="WXPBASE", "WNETBASE"* etc..
    * *Value="C:\WinDDK_PATH\DDK_VERSION"*, you need add here the PATH of the WinDDK Path Version, you can find the version for build the driver in this wiki. *Example: Value="C:\WinDDK\6001.17121"*

Compile *ALWAYS* in *WXP Free*

== Configuring the user mode project in Visual Studio ==

The user mode executable have the driver inside (in a .rsrc), when the executable is running it dumps the driver to a temp file and load the driver. When you build the driver project the output with ".sys" extension is copied to the folder of user mode project. When you build the user mode project with a new driver version you need *Clean the project* after compile.

  * *WARNING:* NEVER REMOVE THE ENTRY:
        * *"..\..\common\common"* in *"Project Properties -> Configuration Properties -> C/C++ -> General -> Additional Include Directories"*

Compile *ALWAYS* in *Release mode*.

= Debugging and Testing Environment =

For an easy debugging and testing environment you can install this tools:
  * *!VirtualKD* - allows speeding up (up to 45x) Windows kernel module debugging using VMWare and !VirtualBox virtual machines: [http://virtualkd.sysprogs.org/]
  * *!VirtualBox or VMWare* (only the versions *compatible* with *!VirtualKD*) - x86 virtualization: *!VirtualBox* [http://www.virtualbox.org/] *VMWare* [http://www.vmware.com/]
  * *Debugging Tools for Windows* 32-bit Versions: [http://www.microsoft.com/whdc/devtools/debugging/installx86.mspx]
  * *Windows Symbol Packages* for the Windows Version of the Virtual Machines: [http://www.microsoft.com/whdc/devtools/debugging/symbolpkg.mspx]
  * If you like the *IDA Pro* for debugging - Kernel debugging with IDA Pro / Windbg plugin and !VirtualKd: [http://www.hexblog.com/?p=123]

To test the user mode and the driver the best and the safe way is in a Virtual Machine, you need configure this Virtual Machine with !VirtualKD for an easy-debugging (without !VirtualKD kernel debugging is very very slow). 

The code have some DKOM code (Direct Kernel Object Manipulation), then it is necessary hardcode some offsets of Windows Kernel structures in the code. In each Windows version have different offset for the same field of a structure. Then you need install a lot of Virtual Machines with different Windows Version: XP, Vista, 7 ...

Of course you need download the Windows Symbols for each Version to view the structs from WinDBG etc..

!VirtualBox and VMWare have support for shared folders between the Virtual Machine and the Real Machine, then you can configure the output of the project in Visual Studio to the shared folder. And after, it is only necessary, compile and execute the .exe from the Virtual Machines.

= Coding Style =

All headers or source files must be with the MIT License:

{{{
/*
Copyright (c) <THE_YEAR> <Author, maybe an email or other info>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
}}}

The code must be justified to 77 columns, you can configure the Visual Assist -> Options -> Display: 77 columns

Identation always with 4 spaces (without TAB CHAR!).

Braces of functions and IF in new paragraph:

{{{
void Function( void )
{ 
    if ( condition )
    {
     
    }
} 
}}}

Params in functions and args with spaces after the comma:

{{{
void Function( int arg1, char arg2 )
{ 
    OtherFunction( arg1, arg2, arg3 );
} 
}}}

If-else, valid:

{{{
if ( condition )
    one_thing
else
    one_thing

if ( condition )
{
    one_or_more_thing
}
else
{
    one_or_more_thing
}

if ( condition )
    one_thing
else
{
    two_or_more_thing
}

if ( condition )
{
    two_or_more_thing
}
else
    one_thing

}}}

NOT VALID: an if with one thing with braces and the else with one thing without braces, it is incongruent.

The Switch with space (this is not a function), using case and breaks like a brace:

{{{
switch ( option )
{
    case 1:
        Function();
    break;

    default:
        other stuff....
    break;
}
}}}

Name of functions with the first letter of each word UPPER: Example

{{{ WhatIsYourName() }}}

The ptrs always with space between the name, example:

{{{
char * WhatIsYourName( char ** arg1, char * arg2 )
{
   char * returnf;

   returnf = NULL;
   * arg1 = NULL;

   return returnf;
}
}}}

While, For, Do-while:

{{{
while ( 1 )
{
    for ( i = 0; i < x; i++ )
    {
    }
}

while ( 1 )
    one_thing

for ( i = 0; i < x; i++ )
    one_thing

do
{

} while ( ... );
}}}

Variable names in lower, separation with _, example: i_am_a_variable

#define, constants, and enums in UPPER, example: #define BLA( x ) ...

Owns typedefs in UPPER with the end _t, example:

{{{
typedef enum OWN_ENUM_e
{
    BLA1 = 2,
    BLA3
} OWN_ENUM_t;
}}}

Example of spaces in printf and fprintf:

{{{
printf( "bla bla %d %d", integer, integer );
fprintf( stderr, "bla bla %d %d", integer, integer );
}}}

Large Functions in IF, or some large stuff:
{{{
if 
(
    LoooooooooooooooooooooooooooooooooooooooooooongFunction
    (
        arg1,
        arg2
    )
)
{
}

variable_name = \
    LoooooooooooooooooooooooooooooooooooooooooooongFunction \
    (
        arg1,
        arg2
    )

printf
(
    " blablabla\n"
    "ble ble ble"
    ,
    arg1,
    arg2
);

if ( condition ) 
{
    printf
        ( " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ", aa, bb );
}

if ( condition ) 
{
    printf
    ( 
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaffffffffffffaaaaaaaaaaaaaaa ", aa, bb 
    );
}

if ( condition ) 
{
    printf
    ( 
        " aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafffffffffffffffffffffffaaaaaaaaaaaaaa ", 
        aa, bb 
    );
}
}}}

Please use comments if this are necessary.

GO-TO, go-to is allow but only if this is necessary like in some driver parts, in user mode if is better if you can avoid the use of goto for example:

{{{
BOOLEN Example( void )
{
    char * first;
    char * second;
    char * third;
    BOOLEAN returnf = FALSE;

    first = calloc( ... );
    if ( first != NULL )
    {
        second = calloc( ... );
        if ( second != NULL )
        {
            third = calloc( ... );
            if ( third != NULL )
            {
                free( third );
 
                returnf = TRUE;
            }

            free( second );
        }

        free( first );
    }

    return returnf;
}
}}}

Please AVOID THIS KIND OF CODE:

{{{
BOOLEN Example( void )
{
    char * first;
    char * second;
    char * third;
    BOOLEAN returnf = FALSE;

    first = calloc( ... );
    if ( first == NULL )
        goto first_fail
    
    second = calloc( ... );
    if ( second == NULL )
        goto second_fail

    third = calloc( ... );
    if ( third == NULL )
        goto third_fail

    returnf = TRUE;
    
    free( third );

    third_fail:
        free( second );

    second_fail:
        free( first );

    first_fail:
        return returnf;
}
}}}

Of course there are scenarios which GO-TO is better and more clear than other complex logic, but in examples like the last is better avoid the use of goto.